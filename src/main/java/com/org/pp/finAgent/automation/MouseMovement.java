package com.org.pp.finAgent.automation;

import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;

import java.awt.AWTException;
import java.awt.Dimension;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.event.InputEvent;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Controls the mouse based on structured commands generated by an LLM.
 */
public class MouseMovement {

    private static final Logger LOGGER = Logger.getLogger(MouseMovement.class.getName());
    private final Robot robot;
    private final Gson gson = new Gson();

    /**
     * A simple data class to hold the deserialized command from the LLM.
     */
    private static class MouseCommand {
        String action;
        Integer x;
        Integer y;
        String button; // "LEFT", "RIGHT", "MIDDLE"
        Integer amount; // For scrolling
    }

    public MouseMovement() throws AWTException {
        this.robot = new Robot();
        // A brief pause to ensure the robot is initialized.
        this.robot.setAutoDelay(50);
    }

    /**
     * The main entry point for executing a command from the LLM.
     *
     * @param jsonCommand A JSON string representing the mouse action.
     */
    public void executeCommand(String jsonCommand) {
        try {
            MouseCommand command = gson.fromJson(jsonCommand, MouseCommand.class);
            if (command == null || command.action == null) {
                LOGGER.warning("Invalid or empty command received: " + jsonCommand);
                return;
            }

            LOGGER.info("Executing action: " + command.action);

            switch (command.action.toUpperCase()) {
                case "MOVE":
                    if (isValidCoordinates(command.x, command.y)) {
                        robot.mouseMove(command.x, command.y);
                    }
                    break;
                case "CLICK":
                    if (command.button != null) {
                        performClick(command.button);
                    }
                    break;
                case "MOVE_AND_CLICK":
                    if (isValidCoordinates(command.x, command.y) && command.button != null) {
                        robot.mouseMove(command.x, command.y);
                        performClick(command.button);
                    }
                    break;
                case "SCROLL":
                    if (command.amount != null) {
                        robot.mouseWheel(command.amount);
                    }
                    break;
                default:
                    LOGGER.warning("Unknown action: " + command.action);
                    break;
            }
        } catch (JsonSyntaxException e) {
            LOGGER.log(Level.SEVERE, "Failed to parse JSON command: " + jsonCommand, e);
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "An error occurred during command execution.", e);
        }
    }

    private void performClick(String button) {
        int buttonMask = getButtonMask(button);
        if (buttonMask != -1) {
            robot.mousePress(buttonMask);
            robot.mouseRelease(buttonMask);
        }
    }

    private int getButtonMask(String button) {
        switch (button.toUpperCase()) {
            case "LEFT":
                return InputEvent.BUTTON1_DOWN_MASK;
            case "RIGHT":
                return InputEvent.BUTTON3_DOWN_MASK;
            case "MIDDLE":
                return InputEvent.BUTTON2_DOWN_MASK;
            default:
                LOGGER.warning("Unknown button type: " + button);
                return -1;
        }
    }

    private boolean isValidCoordinates(Integer x, Integer y) {
        if (x == null || y == null) {
            LOGGER.warning("Coordinates cannot be null for a MOVE action.");
            return false;
        }
        // Optional: Add a check to ensure coordinates are within screen bounds
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        if (x < 0 || x >= screenSize.getWidth() || y < 0 || y >= screenSize.getHeight()) {
            LOGGER.warning("Coordinates (" + x + "," + y + ") are out of screen bounds.");
            // You might want to allow this, but a warning is good practice.
        }
        return true;
    }
}
